import md5, sha

from chromajs import chroma_js, md5_js, sha_js

class chroma():
    """
        @author: Lee Gao
        @contact: http://6.dot.ch/
        @note:
            This is a re-implementation of mattt*'s Chroma-Hash calculator.
            http://mattt.me/2009/07/chroma-hash-a-belated-introduction/
        @param param: 
            password: The password to chroma-hash
            default: The number of colors to return
            _hash: If the password is already hashed by another algorithm or is
                already a MD5 hash, then the _hash function (which takes only one parameter)
                will return a MD5 compatible hash
                SHA1 will be implemented when mattt decides to update his Chroma-Hash specs
        @return: 
            chroma object with 1-4 HTML color items.
        @ivar ivar:
            chroma.colors - array of the chroma-hashed colors
        Example:    
            from Chroma import chroma
            myColors = chroma("password")
    """
    colors = []
    engines = {
            'MD5':md5,
            'SHA':sha
            }
    jsengines = {
                 'MD5':'hex_md5',
                 'SHA':'hex_sha'
                 }
    global backends
    backends = {}
    global calls
    calls = {}
    def backend(function):
        at = 'type'
        name = function.__name__.lower()
        backends[name] = function
        for name in function.func_doc.split():
            if name[:1] == '@':
                at = name[1:]
                continue
            if at == 'types':
                backends[name.lower()] = function
            elif at == 'frontend':
                break
            
        
        
    def __init__(self, password, default = 3, alg = 'MD5', salt = '', backend = None):
        if default > 4: default = 4;
        self.alg = alg
        self.engine = self.engines[alg]
        self.jsengine = self.jsengines[alg]
        self.salt = salt
        self.frontend = None
        
        self.chroma_js = chroma_js
        self.md5_js = md5_js
        self.sha_js = sha_js
        
        if not backend:
            hash = self.engine.new(password).hexdigest()
        else:
            hash = password
            
            #There are various password storage combinations
            if backend in backends.keys():
                hash = backends[backend](self, password, salt)
                self.backend = backends[backend]
                
        self.hash = hash #Must be guarranteed that this is just a hexdigest of some function
            
        for c in range(default):
            self.colors.append("#"+hash[c*6:(c+1)*6])
        
        self.javascript()
    
    @backend
    def vbulletin(self, hash, salt):
        """
        @types
        vbulletin vb vbforum
        """
        
        self.engine = md5
        self.jsengine = 'hex_md5'
        #md5(md5(password)+salt)
        self.frontend = """
        return %s(hex_md5(password)+salt);
        """ % self.jsengine
        
        return hash        
    
    @backend
    def django(self, hash, salt):
        """
        @types
        django
        """
        
        #alg$salt$hash
        self.frontend = """
        return %s(salt + password);
        """ % self.jsengine
        self.salt = hash.split("$")[1]
        return hash.split("$")[2]
    
    def javascript(self):
        frontend = "/* Generated by pyChroma */\n/* Author: Lee Gao */\n/* http://6.dot.ch/ */\n"
        if self.frontend:
            frontend += """function %s(password, salt){
            %s
        }""" %(self.backend.__name__, self.frontend)
        else:
            frontend += """function backend(password, salt){
                return %s(password)
            }\n""" % (self.jsengine)
        
        chroma = self.chroma_js % ("'%s'" % self.salt, self.backend.__name__)
        
        self.javascript = frontend + chroma
        
        
        return self.javascript
        
    def __repr__(self):
        return 'Colors:%s' %(self.colors)
    def __len__(self):
        return len(self.colors)
    def __iter__(self):
        return iter(self.colors)
    def __getitem__(self, key):
        return self.colors[key]